--- a/net/minecraft/core/registries/BuiltInRegistries.java
+++ b/net/minecraft/core/registries/BuiltInRegistries.java
@@ -163,7 +163,7 @@
     public static final Registry<PositionSourceType<?>> POSITION_SOURCE_TYPE = registerSimple(
         Registries.POSITION_SOURCE_TYPE, p_259113_ -> PositionSourceType.BLOCK
     );
-    public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = registerSimple(Registries.COMMAND_ARGUMENT_TYPE, ArgumentTypeInfos::bootstrap);
+    public static final Registry<ArgumentTypeInfo<?, ?>> COMMAND_ARGUMENT_TYPE = registerSimple(Registries.COMMAND_ARGUMENT_TYPE, (RegistryBootstrap)ArgumentTypeInfos::bootstrap);
     public static final Registry<StatType<?>> STAT_TYPE = registerSimple(Registries.STAT_TYPE, p_259967_ -> Stats.ITEM_USED);
     public static final DefaultedRegistry<VillagerType> VILLAGER_TYPE = registerDefaulted(Registries.VILLAGER_TYPE, "plains", p_259473_ -> VillagerType.PLAINS);
     public static final DefaultedRegistry<VillagerProfession> VILLAGER_PROFESSION = registerDefaulted(
@@ -232,18 +232,18 @@
     public static final Registry<FeatureSizeType<?>> FEATURE_SIZE_TYPE = registerSimple(
         Registries.FEATURE_SIZE_TYPE, p_259370_ -> FeatureSizeType.TWO_LAYERS_FEATURE_SIZE
     );
-    public static final Registry<MapCodec<? extends BiomeSource>> BIOME_SOURCE = registerSimple(Registries.BIOME_SOURCE, BiomeSources::bootstrap);
-    public static final Registry<MapCodec<? extends ChunkGenerator>> CHUNK_GENERATOR = registerSimple(Registries.CHUNK_GENERATOR, ChunkGenerators::bootstrap);
+    public static final Registry<MapCodec<? extends BiomeSource>> BIOME_SOURCE = registerSimple(Registries.BIOME_SOURCE, (RegistryBootstrap)BiomeSources::bootstrap);
+    public static final Registry<MapCodec<? extends ChunkGenerator>> CHUNK_GENERATOR = registerSimple(Registries.CHUNK_GENERATOR, (RegistryBootstrap)ChunkGenerators::bootstrap);
     public static final Registry<MapCodec<? extends SurfaceRules.ConditionSource>> MATERIAL_CONDITION = registerSimple(
-        Registries.MATERIAL_CONDITION, SurfaceRules.ConditionSource::bootstrap
+        Registries.MATERIAL_CONDITION, (RegistryBootstrap)SurfaceRules.ConditionSource::bootstrap
     );
     public static final Registry<MapCodec<? extends SurfaceRules.RuleSource>> MATERIAL_RULE = registerSimple(
-        Registries.MATERIAL_RULE, SurfaceRules.RuleSource::bootstrap
+        Registries.MATERIAL_RULE, (RegistryBootstrap)SurfaceRules.RuleSource::bootstrap
     );
     public static final Registry<MapCodec<? extends DensityFunction>> DENSITY_FUNCTION_TYPE = registerSimple(
-        Registries.DENSITY_FUNCTION_TYPE, DensityFunctions::bootstrap
+        Registries.DENSITY_FUNCTION_TYPE, (RegistryBootstrap)DensityFunctions::bootstrap
     );
-    public static final Registry<MapCodec<? extends Block>> BLOCK_TYPE = registerSimple(Registries.BLOCK_TYPE, BlockTypes::bootstrap);
+    public static final Registry<MapCodec<? extends Block>> BLOCK_TYPE = registerSimple(Registries.BLOCK_TYPE, (RegistryBootstrap)BlockTypes::bootstrap);
     public static final Registry<StructureProcessorType<?>> STRUCTURE_PROCESSOR = registerSimple(
         Registries.STRUCTURE_PROCESSOR, p_259305_ -> StructureProcessorType.BLOCK_IGNORE
     );
@@ -317,7 +317,7 @@
         Bootstrap.checkBootstrapCalled(() -> "registry " + p_259230_);
         ResourceLocation resourcelocation = p_259230_.location();
         LOADERS.put(resourcelocation, () -> p_259210_.run(p_260327_));
-        WRITABLE_REGISTRY.register((ResourceKey<WritableRegistry<?>>)p_259230_, p_260327_, RegistrationInfo.BUILT_IN);
+        WRITABLE_REGISTRY.register((ResourceKey)p_259230_, p_260327_, RegistrationInfo.BUILT_IN);
         return p_260327_;
     }
 
